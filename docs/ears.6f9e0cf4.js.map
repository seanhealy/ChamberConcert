{"version":3,"sources":["ears.js"],"names":["audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","smoothingTimeConstant","numbersView","document","getElementById","historyView","navigator","mediaDevices","getUserMedia","console","log","constraints","audio","then","stream","source","createMediaStreamSource","connect","draw","catch","err","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteTimeDomainData","canvas","canvasCtx","getContext","WIDTH","clientWidth","HEIGHT","clientHeight","recordedCharacter","lastIntValue","lastChange","Date","now","timeThreshold","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","barWidth","barHeight","x","i","relevantFrequency","binaryString","getBits","join","intValue","parseInt","recordCharacter","amplitudeThreshold","bitRanges","bitFrequencies","map","range","Math","round","frequencyArray","frequency","reverse","index","some","low","high","character","String","fromCharCode","innerHTML"],"mappings":"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","file":"ears.6f9e0cf4.js","sourceRoot":"..","sourcesContent":["var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\nvar analyser = audioCtx.createAnalyser();\nanalyser.smoothingTimeConstant = 0;\n\nconst numbersView = document.getElementById(\"numbers\");\nconst historyView = document.getElementById(\"history\");\n\nif (navigator.mediaDevices.getUserMedia) {\n  console.log(\"getUserMedia supported.\");\n  var constraints = { audio: true };\n  navigator.mediaDevices\n    .getUserMedia(constraints)\n    .then(function(stream) {\n      source = audioCtx.createMediaStreamSource(stream);\n      source.connect(analyser);\n\n      draw();\n    })\n    .catch(function(err) {\n      console.log(\"The following gUM error occured: \" + err);\n    });\n} else {\n  console.log(\"getUserMedia not supported on your browser!\");\n}\n\nanalyser.fftSize = 2048;\nvar bufferLength = analyser.frequencyBinCount;\nvar dataArray = new Uint8Array(bufferLength);\nanalyser.getByteTimeDomainData(dataArray);\n\n// Get a canvas defined with ID \"oscilloscope\"\nvar canvas = document.getElementById(\"oscilloscope\");\nvar canvasCtx = canvas.getContext(\"2d\");\n\nconst WIDTH = canvas.clientWidth;\nconst HEIGHT = canvas.clientHeight;\n\n// draw an oscilloscope of the current audio source\n\nlet recordedCharacter = false;\nlet lastIntValue = 0;\nlet lastChange = Date.now();\nconst timeThreshold = 20;\n\nfunction draw() {\n  requestAnimationFrame(draw);\n\n  analyser.getByteFrequencyData(dataArray);\n\n  canvasCtx.fillStyle = \"rgb(0, 0, 0)\";\n  canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n  var barWidth = (WIDTH / bufferLength) * 0.9;\n  var barHeight;\n  var x = 0;\n\n  for (var i = 0; i < bufferLength; i++) {\n    barHeight = dataArray[i];\n\n    if (relevantFrequency(i)) {\n      canvasCtx.fillStyle = \"rgb(0,255,0)\";\n    } else {\n      canvasCtx.fillStyle = \"rgb(255,0,0)\";\n    }\n    canvasCtx.fillRect(x, HEIGHT - barHeight / 2, barWidth, barHeight / 2);\n\n    x += barWidth + 1;\n  }\n\n  const binaryString = getBits(dataArray).join(\"\");\n  const intValue = parseInt(binaryString, 2);\n\n  if (lastIntValue === intValue) {\n    if (!recordedCharacter && Date.now() - lastChange > timeThreshold) {\n      recordCharacter({ binaryString, intValue });\n      recordedCharacter = true;\n    }\n  } else {\n    lastChange = Date.now();\n    lastIntValue = intValue;\n    recordedCharacter = false;\n  }\n}\n\nconst amplitudeThreshold = 150;\n\nconst bitRanges = [\n  [47, 50],\n  [54, 57],\n  [61, 64],\n  [69, 71],\n  [76, 78],\n  [83, 85],\n  [89, 92],\n  [96, 99]\n];\n\nconst bitFrequencies = bitRanges.map(range =>\n  Math.round((range[0] + range[1]) / 2)\n);\n\nfunction getBits(frequencyArray) {\n  return bitFrequencies\n    .map(frequency => (frequencyArray[frequency] > amplitudeThreshold) + 0)\n    .reverse();\n}\n\nfunction relevantFrequency(index) {\n  return bitRanges.some(([low, high]) => index >= low && index <= high);\n}\n\nfunction recordCharacter({ binaryString, intValue }) {\n  const character = String.fromCharCode(intValue);\n  numbersView.innerHTML = `${binaryString} -- ${intValue} -- ${character}`;\n\n  historyView.innerHTML = historyView.innerHTML + character;\n}\n\ndraw();\n"]}